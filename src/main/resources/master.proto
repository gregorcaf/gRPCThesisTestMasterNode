syntax = "proto3";

option java_multiple_files = true;
option java_package = "si.mlimedija.proto";

package Master;

service master {

  rpc putData(PutDataRequest) returns (PutDataResponse);

  rpc getData(GetDataRequest) returns (GetDataResponse);

  rpc putFileEndpoint(PutFileEndpointRequest) returns (PutFileEndpointResponse);

  rpc getFileEndpoint(GetFileEndpointRequest) returns (GetFileEndpointResponse);

  rpc putKeys(PutKeysRequest) returns (PutKeysResponse);

  rpc deleteKeys(DeleteKeysRequest) returns (DeleteKeysResponse);

  rpc nodeHandshake(NodeHandshakeRequest) returns (NodeHandshakeResponse);

}

// put data to cache => request
message PutDataRequest {
  string key = 1;
  string value = 2;
}

// put data to cache => response
message PutDataResponse {
  string key = 1;
  int32 responseCode = 2;
  string responseMessage = 3;
}

// get data from cache => request
message GetDataRequest {
  string key = 1;
}

// get data from cache => response
message GetDataResponse {
  string key = 1;
  string value = 2;
  int32 responseCode = 3;
  string responseMessage = 4;
}

// initial request for put file
message PutFileEndpointRequest {
  string fileName = 1;
  int32 fileSizeMb = 2;
}

// initial response for put file
message PutFileEndpointResponse {
  string nodeIpAddress = 1;
  int32 nodePort = 2;
}

// initial request for get file
message GetFileEndpointRequest {
  string fileName = 1;
}

// initial response for get file
message GetFileEndpointResponse {
  repeated string nodeIpAddress = 1;
  bool isStoredOnS3 = 2;
  string s3BucketName = 3;
  string s3ObjectKey = 4;
}

// request for adding keys to registry (Lambda cache)
message PutKeysRequest {
  int32 nodeId = 1;
  repeated string keys = 2;
}

// response for adding keys to registry (Lambda cache)
message PutKeysResponse {
  int32 responseCode = 1;
  string responseMessage = 2;
}

// request for deleting keys from registry (Lambda cache)
message DeleteKeysRequest {
  int32 nodeId = 1;
  repeated string keys = 2;
}

// response for deleting keys from registry (Lambda cache)
message DeleteKeysResponse {
  int32 responseCode = 1;
  string responseMessage = 2;
}

// initial handshake request
message NodeHandshakeRequest {
  string nodeIpAddress = 1;
  int32 nodePort = 2;
  string nodeType = 3;
}

// initial handshake response
message NodeHandshakeResponse {
  int32 nodeId = 1;
  int32 responseCode = 2;
  string responseMessage = 3;
}
